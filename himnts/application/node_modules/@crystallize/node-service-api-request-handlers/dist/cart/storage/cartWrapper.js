"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRepository = exports.Transition = exports.State = void 0;
const statemachine_1 = require("../../core/statemachine");
var State;
(function (State) {
    State["Cart"] = "cart";
    State["Placed"] = "placed";
    State["Paid"] = "paid";
})(State = exports.State || (exports.State = {}));
var Transition;
(function (Transition) {
    Transition["Save"] = "save";
    Transition["Place"] = "place";
    Transition["Fullfill"] = "fullfill";
})(Transition = exports.Transition || (exports.Transition = {}));
const defaultStateMachineDefinition = {
    states: {
        [State.Cart]: {
            transitions: {
                [Transition.Save]: {
                    to: State.Cart,
                },
                [Transition.Place]: {
                    to: State.Placed,
                },
            },
        },
        [State.Placed]: {
            transitions: {
                [Transition.Fullfill]: {
                    to: State.Paid,
                },
            },
        },
        [State.Paid]: {
            transitions: {},
        },
    },
};
function createRepository(storage, stateMachineDefinition) {
    const buildMachine = (subject) => (0, statemachine_1.createStateMachine)(subject, 'state', stateMachineDefinition || defaultStateMachineDefinition);
    async function find(id) {
        let item = await storage.get(id);
        if (item) {
            return JSON.parse(item);
        }
        return null;
    }
    async function persist(item) {
        await storage.set(item.cartId, JSON.stringify(item));
    }
    function create(cart, id, extra) {
        return {
            cartId: id,
            cart,
            state: State.Cart,
            extra,
        };
    }
    function save(cartWrapper) {
        const machine = buildMachine(cartWrapper);
        const transition = Transition.Save;
        if (!machine.canTransit(transition)) {
            return false;
        }
        machine.transition(transition);
        persist(cartWrapper);
        return true;
    }
    function place(cartWrapper) {
        const machine = buildMachine(cartWrapper);
        const transition = Transition.Place;
        if (!machine.canTransit(transition)) {
            return false;
        }
        machine.transition(transition);
        persist(cartWrapper);
        return true;
    }
    function attachOrderId(cartWrapper, orderId) {
        cartWrapper.extra = { ...cartWrapper.extra, orderId };
        const machine = buildMachine(cartWrapper);
        machine.transition(Transition.Fullfill);
        persist(cartWrapper);
    }
    return {
        find,
        create,
        save,
        place,
        attachOrderId,
    };
}
exports.createRepository = createRepository;
//# sourceMappingURL=cartWrapper.js.map