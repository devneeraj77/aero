import { z } from 'zod';
import type { Image, Product, ProductVariant, ProductPriceVariant, ProductHydrater } from '@crystallize/js-api-client';
declare const cartItemPayload: z.ZodObject<{
    sku: z.ZodString;
    quantity: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    sku: string;
    quantity: number;
}, {
    sku: string;
    quantity: number;
}>;
export declare const cartPayload: z.ZodObject<{
    locale: z.ZodString;
    withImages: z.ZodOptional<z.ZodBoolean>;
    items: z.ZodArray<z.ZodObject<{
        sku: z.ZodString;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        sku: string;
        quantity: number;
    }, {
        sku: string;
        quantity: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    locale: string;
    items: {
        sku: string;
        quantity: number;
    }[];
    withImages?: boolean | undefined;
}, {
    locale: string;
    items: {
        sku: string;
        quantity: number;
    }[];
    withImages?: boolean | undefined;
}>;
export type CartPayload = z.infer<typeof cartPayload>;
export type CartItemPayload = z.infer<typeof cartItemPayload>;
export interface KeyValuePair {
    key: string;
    value?: string;
}
export interface Cart {
    cart: {
        items: CartItem[];
    };
    total: Price;
}
export interface CartItem {
    quantity: number;
    price: Price;
    images?: Image[];
    product: Product;
    variant: ProductVariant;
    variantPrice: ProductPriceVariant;
    meta?: KeyValuePair[];
}
export interface Price {
    gross: number;
    net: number;
    currency: string;
    taxAmount: number;
    discounts?: {
        amount: number;
        percent?: number;
    }[];
}
export type CartHydraterArguments = {
    hydraterBySkus?: ProductHydrater;
    extraQuery?: any;
    perProduct?: (item: string, index: number) => any;
    perVariant?: (item: string, index: number) => any;
    currency: string;
    pricesHaveTaxesIncludedInCrystallize?: boolean;
    selectPriceVariant?: (product: Product, selectedVariant: ProductVariant, currency: string) => ProductPriceVariant;
    basePriceVariant?: (product: Product, selectedVariant: ProductVariant, currency: string) => ProductPriceVariant;
};
export {};
