"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitionError = exports.createStateMachine = void 0;
function createStateMachine(subject, stateProperty, definition) {
    const { states } = definition;
    const actionInfos = (transitionName) => {
        const currentState = subject[stateProperty];
        const currentStateDefinition = states[currentState];
        const destinationTransition = currentStateDefinition.transitions[transitionName];
        if (!destinationTransition) {
            throw new TransitionError(`Cannot find the transition '${transitionName}' on subject with state '${currentState}'.`);
        }
        const destinationState = destinationTransition.to;
        const destinationStateDefinition = states[destinationState];
        if (!destinationStateDefinition) {
            throw new TransitionError(`Cannot transition to '${destinationState}' from '${currentState}'. It does not exist.`);
        }
        return {
            currentStateDefinition,
            destinationTransition,
            destinationStateDefinition,
            destinationState,
        };
    };
    return {
        subject,
        transition(transitionName) {
            const { currentStateDefinition, destinationTransition, destinationStateDefinition, destinationState } = actionInfos(transitionName);
            if (destinationTransition.action) {
                destinationTransition.action(subject);
            }
            if (currentStateDefinition.onExit) {
                currentStateDefinition.onExit(subject);
            }
            if (destinationStateDefinition.onEnter) {
                destinationStateDefinition.onEnter(subject);
            }
            subject[stateProperty] = destinationState;
            if (destinationStateDefinition.onEntered) {
                destinationStateDefinition.onEntered(subject);
            }
        },
        canTransit(transitionName) {
            try {
                actionInfos(transitionName);
                return true;
            }
            catch (exception) {
                return false;
            }
        },
    };
}
exports.createStateMachine = createStateMachine;
class TransitionError extends Error {
    constructor(message) {
        super(message);
        this.name = 'TransitionError';
        this.code = 400;
    }
}
exports.TransitionError = TransitionError;
//# sourceMappingURL=statemachine.js.map