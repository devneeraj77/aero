"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleDinteroVerificationPayload = exports.handleDinteroPaymentSessionPayload = void 0;
const fetchAuthToken_1 = require("./fetchAuthToken");
async function handleDinteroPaymentSessionPayload(payload, args) {
    const cart = await args.fetchCart();
    const authToken = await (0, fetchAuthToken_1.fetchDinteroAuthToken)(args.credentials);
    const expressCheckoutObject = args.express?.enabled ? { express: args.express.expressCheckoutOptions } : {};
    const response = await fetch('https://checkout.dintero.com/v1/sessions-profile', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken.access_token}`,
        },
        body: JSON.stringify({
            profile_id: args.credentials.profileId ?? 'default',
            order: {
                currency: cart.total.currency,
                merchant_reference: payload.cartId,
                amount: cart.total.gross * 100,
                vat_amount: cart.total.taxAmount * 100,
                items: cart.cart.items.map((item, index) => ({
                    id: item.variant.sku,
                    line_id: index.toString(),
                    description: item.variant.name,
                    quantity: item.quantity,
                    vat_amount: item.price.taxAmount * 100,
                    amount: item.price.gross * 100,
                    thumbnail_url: item.variant.firstImage?.url ?? '',
                    discounts: item.price?.discounts?.map((discount) => ({
                        percent: discount.percent,
                        amount: discount.amount * 100,
                    })) ?? [],
                })),
                shipping_address: args.customer?.shippingAddress,
                billing_address: args.customer?.billingAddress,
            },
            url: {
                return_url: args.returnUrl,
                callback_url: args.callbackUrl,
            },
            customer: {
                email: args?.customer?.email ?? '',
            },
            ...expressCheckoutObject,
        }),
    }).then((res) => res.json());
    if (!response) {
        throw new Error('Session not created');
    }
    return {
        sessionId: response.id,
        data: response,
    };
}
exports.handleDinteroPaymentSessionPayload = handleDinteroPaymentSessionPayload;
async function handleDinteroVerificationPayload(payload, args) {
    const authToken = await (0, fetchAuthToken_1.fetchDinteroAuthToken)(args.credentials);
    const response = await fetch(`https://checkout.dintero.com/v1/transactions/${args.transactionId}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken.access_token}`,
        },
    }).then((res) => res.json());
    if (!response) {
        throw new Error('Could not fetch Dintero transaction');
    }
    return args.handleEvent(response.status, response);
}
exports.handleDinteroVerificationPayload = handleDinteroVerificationPayload;
//# sourceMappingURL=handlers.js.map