"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleQuickPayPaymentUpdateWebhookRequestPayload = exports.handleQuickPayCreatePaymentLinkRequestPayload = void 0;
const client_1 = require("./client");
const crypto_1 = __importDefault(require("crypto"));
async function handleQuickPayCreatePaymentLinkRequestPayload(payload, args) {
    const client = (0, client_1.createClient)(args.api_key);
    const cart = await args.fetchCart();
    const paymentArguments = args.createPaymentArguments(cart);
    const defaultVariables = {
        cartId: payload.cartId,
    };
    const payment = await client.post('https://api.quickpay.net/payments', {
        // there is a limit 20 characters for the order_id on QuickPay
        order_id: crypto_1.default.createHash('md5').update(payload.cartId).digest('hex').substring(0, 20),
        currency: paymentArguments.currency,
        variables: {
            ...defaultVariables,
            ...(paymentArguments.extra ? paymentArguments.extra : {}),
        },
        ...(args.otherPaymentArgumentsForPayment ? args.otherPaymentArgumentsForPayment : {}),
    });
    const link = await client.put('https://api.quickpay.net/payments/' + payment.id + '/link', {
        amount: paymentArguments.amount,
        continue_url: paymentArguments.urls.continue,
        cancel_url: paymentArguments.urls.cancel,
        callback_url: paymentArguments.urls.callback,
        ...(args.otherPaymentArgumentsForLink ? args.otherPaymentArgumentsForLink : {}),
    });
    return {
        url: link.url,
    };
}
exports.handleQuickPayCreatePaymentLinkRequestPayload = handleQuickPayCreatePaymentLinkRequestPayload;
async function handleQuickPayPaymentUpdateWebhookRequestPayload(payload, args) {
    const checksum = args.signature;
    const bodyAsString = JSON.stringify(args.rawBody);
    const bodyHashed = crypto_1.default.createHmac('sha256', args.private_key).update(bodyAsString).digest('hex');
    if (checksum !== bodyHashed) {
        console.error('Signature is not valid');
        return {};
    }
    return await args.handleEvent(payload);
}
exports.handleQuickPayPaymentUpdateWebhookRequestPayload = handleQuickPayPaymentUpdateWebhookRequestPayload;
//# sourceMappingURL=handlers.js.map