"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRazorPayPaymentVerificationPayload = exports.handleRazorPayOrderPayload = void 0;
const razorpay_1 = __importDefault(require("razorpay"));
const crypto_1 = __importDefault(require("crypto"));
async function handleRazorPayOrderPayload(payload, args) {
    const cart = await args.fetchCart();
    const instance = new razorpay_1.default({
        key_id: args.credentials.key_id,
        key_secret: args.credentials.key_secret,
    });
    const options = {
        amount: cart.total.gross * 100,
        currency: args.currency,
        receipt: crypto_1.default.createHash('md5').update(payload.cartId).digest('hex').substring(0, 20),
        notes: {
            cartId: payload.cartId,
        },
    };
    const order = await instance.orders.create(options);
    if (!order) {
        throw new Error('Order not created');
    }
    return {
        orderID: order.id,
        data: order,
    };
}
exports.handleRazorPayOrderPayload = handleRazorPayOrderPayload;
async function handleRazorPayPaymentVerificationPayload(payload, args) {
    const instance = new razorpay_1.default({
        key_id: args.key_id,
        key_secret: args.key_secret,
    });
    const checksum = args.razorpaySignature;
    const bodyHashed = crypto_1.default
        .createHmac('sha256', args.key_secret)
        .update(`${args.orderCreationId}|${args.razorpayPaymentId}`)
        .digest('hex');
    if (checksum !== bodyHashed) {
        console.error('Signature is not valid');
        return {};
    }
    const fetchRazorpayOrder = await instance.orders.fetch(args.razorpayOrderId);
    return await args.handleEvent('success', fetchRazorpayOrder);
}
exports.handleRazorPayPaymentVerificationPayload = handleRazorPayPaymentVerificationPayload;
//# sourceMappingURL=handlers.js.map