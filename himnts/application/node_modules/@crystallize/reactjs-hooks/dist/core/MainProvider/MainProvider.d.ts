import * as React from 'react';
import { State, Actions } from './Reducer';
import { FunctionComponent } from 'react';
import { ClientInterface, createOrderFetcher, createCatalogueFetcher } from '@crystallize/js-api-client';
declare const CrystallizeProvider: FunctionComponent<{
    children: React.ReactNode;
    language: string;
    tenantIdentifier: string;
    accessTokenId?: string;
    accessTokenSecret?: string;
}>;
export type LanguageAwareTreeFetcher = (path: string, depth: number, extraQuery?: any, perLevel?: (currentLevel: number) => any) => Promise<any>;
export type LanguageAwareHydrater = (items: string[], extraQuery?: any, perProduct?: (item: string, index: number) => any) => Promise<any>;
type helpers = {
    catalogueFetcher: ReturnType<typeof createCatalogueFetcher>;
    navigationFetcher: {
        byFolders: LanguageAwareTreeFetcher;
        byTopics: LanguageAwareTreeFetcher;
    };
    productHydrater: {
        byPaths: LanguageAwareHydrater;
        bySkus: LanguageAwareHydrater;
    };
    orderFetcher: ReturnType<typeof createOrderFetcher>;
};
declare function useCrystallize(): {
    helpers: helpers;
    apiClient: ClientInterface;
    state: State;
    dispatch: Actions;
};
export { CrystallizeProvider, useCrystallize };
