"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCrystallize = exports.CrystallizeProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
const Reducer_1 = require("./Reducer");
const js_api_client_1 = require("@crystallize/js-api-client");
const StateContext = React.createContext(undefined);
const DispatchContext = React.createContext(undefined);
const initialState = (configuration, language) => {
    return {
        loading: false,
        language: language,
        configuration: configuration,
    };
};
const CrystallizeProvider = ({ tenantIdentifier, accessTokenId, accessTokenSecret, language, children }) => {
    const [state, dispatch] = React.useReducer(Reducer_1.Reducer, initialState({ tenantIdentifier, accessTokenId, accessTokenSecret }, language));
    return ((0, jsx_runtime_1.jsx)(StateContext.Provider, { value: state, children: (0, jsx_runtime_1.jsx)(DispatchContext.Provider, { value: dispatch, children: children }) }));
};
exports.CrystallizeProvider = CrystallizeProvider;
function useCrystallizeState() {
    const context = React.useContext(StateContext);
    if (context === undefined) {
        throw new Error('useCrystallizeState must be used within the MainProvider.');
    }
    return context;
}
function useCrystallizeDispatch() {
    const context = React.useContext(DispatchContext);
    if (context === undefined) {
        throw new Error('useCrystallizeDispatch must be used within the MainProvider.');
    }
    return context;
}
function useCrystallize() {
    const actions = (0, Reducer_1.mapToReducerActions)(useCrystallizeDispatch());
    const state = useCrystallizeState();
    const apiClient = (0, js_api_client_1.createClient)({
        tenantIdentifier: state.configuration.tenantIdentifier,
    });
    const helpers = React.useMemo(() => {
        return {
            catalogueFetcher: (0, js_api_client_1.createCatalogueFetcher)(apiClient),
            navigationFetcher: {
                byFolders: (path, depth = 1, extraQuery, perLevel) => (0, js_api_client_1.createNavigationFetcher)(apiClient).byFolders(path, state.language, depth, extraQuery, perLevel),
                byTopics: (path, depth = 1, extraQuery, perLevel) => (0, js_api_client_1.createNavigationFetcher)(apiClient).byTopics(path, state.language, depth, extraQuery, perLevel),
            },
            productHydrater: {
                byPaths: (paths, extraQuery, perProduct) => (0, js_api_client_1.createProductHydrater)(apiClient).byPaths(paths, state.language, extraQuery, perProduct),
                bySkus: (skus, extraQuery, perProduct) => (0, js_api_client_1.createProductHydrater)(apiClient).bySkus(skus, state.language, extraQuery, perProduct),
            },
            orderFetcher: (0, js_api_client_1.createOrderFetcher)(apiClient),
        };
    }, [apiClient, state.language]);
    return {
        helpers,
        apiClient,
        state,
        dispatch: actions,
    };
}
exports.useCrystallize = useCrystallize;
//# sourceMappingURL=MainProvider.js.map