"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFetchResult = exports.postJson = exports.getJson = void 0;
const fetchResult = async (url, init) => {
    const response = await fetch(url, {
        credentials: 'include',
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
            Accept: 'application/json',
        },
        ...init,
    });
    if (!response.ok) {
        throw new Error(`Could not fetch ${url}. Response NOT OK.`);
    }
    const json = await response.json();
    if (json.errors) {
        throw new Error(`Could not fetch ${url}. Response contains errors.`);
    }
    return json;
};
const jsonRequest = async (input, method, init) => {
    return fetchResult(input, {
        method: method,
        ...init,
    });
};
const getJson = async (input, init) => jsonRequest(input, 'GET', init);
exports.getJson = getJson;
const postJson = async (input, body, init) => jsonRequest(input, 'POST', {
    body: JSON.stringify(body),
    ...init,
});
exports.postJson = postJson;
const useFetchResult = () => {
    const abortController = new AbortController();
    const abort = () => {
        abortController.abort();
    };
    const signalInit = {
        signal: abortController.signal,
    };
    const get = async (url, init) => {
        return await (0, exports.getJson)(url, {
            ...signalInit,
            ...init,
        });
    };
    const post = async (url, body, init) => {
        return await (0, exports.postJson)(url, body, {
            ...signalInit,
            ...init,
        });
    };
    return { get, post, abort };
};
exports.useFetchResult = useFetchResult;
//# sourceMappingURL=useFetch.js.map