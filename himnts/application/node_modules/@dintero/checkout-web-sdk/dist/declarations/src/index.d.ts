import "native-promise-only";
import { CheckoutEvents, InternalCheckoutEvents, SessionNotFound, SessionLoaded, SessionUpdated, SessionCancel, SessionPaymentOnHold, SessionPaymentAuthorized, SessionPaymentError, SessionLocked, SessionLockFailed, ActivePaymentProductType, ValidateSession, SessionValidationCallback, SessionEvent } from "./checkout.js";
import { SubscriptionHandler } from "./subscribe.js";
import { Session } from "./session.js";
export interface DinteroCheckoutInstance {
    /**
     * Remove iframe and all event listeners.
     */
    destroy: () => void;
    iframe: HTMLIFrameElement;
    language: string;
    lockSession: () => Promise<SessionEvent>;
    refreshSession: () => Promise<SessionEvent>;
    setActivePaymentProductType: (paymentProductType: string) => void;
    submitValidationResult: (result: SessionValidationCallback) => void;
    options: InternalDinteroEmbedCheckoutOptions;
    handlers: ({
        handler: SubscriptionHandler;
        eventTypes: InternalCheckoutEvents[];
    } | {
        handler: SubscriptionHandler;
        eventTypes: CheckoutEvents[];
    })[];
    session: Session | undefined;
    popOutWindow: Window | undefined;
}
export interface DinteroCheckoutOptions {
    sid: string;
    endpoint?: string;
    language?: string;
}
export interface DinteroEmbedCheckoutOptions extends DinteroCheckoutOptions {
    container: HTMLDivElement;
    popOut?: boolean;
    onPayment?: (event: SessionPaymentAuthorized | SessionPaymentOnHold, checkout: DinteroCheckoutInstance) => void;
    /**
     * @deprecated Since version 0.0.1. Will be deleted in version 1.0.0. Use onPayment instead.
     */
    onPaymentAuthorized?: (event: SessionPaymentAuthorized, checkout: DinteroCheckoutInstance) => void;
    onSession?: (event: SessionLoaded | SessionUpdated, checkout: DinteroCheckoutInstance) => void;
    onPaymentError?: (event: SessionPaymentError, checkout: DinteroCheckoutInstance) => void;
    onSessionCancel?: (event: SessionCancel, checkout: DinteroCheckoutInstance) => void;
    onSessionNotFound?: (event: SessionNotFound, checkout: DinteroCheckoutInstance) => void;
    onSessionLocked?: (event: SessionLocked, checkout: DinteroCheckoutInstance, callback: () => void) => void;
    onSessionLockFailed?: (event: SessionLockFailed, checkout: DinteroCheckoutInstance) => void;
    onActivePaymentType?: (event: ActivePaymentProductType, checkout: DinteroCheckoutInstance) => void;
    onValidateSession?: (event: ValidateSession, checkout: DinteroCheckoutInstance, callback: (result: SessionValidationCallback) => void) => void;
}
interface InternalDinteroEmbedCheckoutOptions extends DinteroEmbedCheckoutOptions {
    innerContainer: HTMLDivElement;
}
/**
 * Show a dintero payment session in an embedded iframe.
 */
export declare const embed: (options: DinteroEmbedCheckoutOptions) => Promise<DinteroCheckoutInstance>;
/**
 * Redirect the customer to a payment session in the Dintero Checkout.
 */
export declare const redirect: (options: DinteroCheckoutOptions) => void;
export type { SessionNotFound, SessionLoaded, SessionUpdated, SessionCancel, SessionPaymentOnHold, SessionPaymentAuthorized, SessionPaymentError, SessionLocked, SessionLockFailed, ActivePaymentProductType, ValidateSession, SessionValidationCallback, } from "./checkout.js";
